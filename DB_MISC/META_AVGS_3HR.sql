
-- MC

	--alter view hr3_avg_mc as -- snapshot: all rows with hour 3 prices (with z-score vs 12-hr cohort, exclude outlyers from cohort set)
	--	SELECT m.*, 
	--		CohortStats.mean_market_cap,
	--		CohortStats.stddev_market_cap,
	--		(m.hr3_market_cap - CohortStats.mean_market_cap) / NULLIF(CohortStats.stddev_market_cap, 0) AS z_score
	--	FROM 
	--		dbo.mint m
	--	CROSS APPLY
	--	(
	--		SELECT 
	--			AVG(hr3_market_cap) AS mean_market_cap,
	--			STDEV(hr3_market_cap) AS stddev_market_cap
	--		FROM 
	--		(
	--			SELECT 
	--				m2.hr3_market_cap,
	--				ROW_NUMBER() OVER (ORDER BY m2.hr3_market_cap DESC) as rn_desc,
	--				ROW_NUMBER() OVER (ORDER BY m2.hr3_market_cap ASC) as rn_asc,
	--				COUNT(*) OVER () as total_count
	--			FROM 
	--				dbo.mint m2
	--			WHERE 
	--				m2.hr3_market_cap IS NOT NULL
	--				AND m2.fetched_utc_3hr BETWEEN DATEADD(hour, -12, m.fetched_utc_3hr) AND m.fetched_utc_3hr
	--				AND m2.id <> m.id  -- Exclude the current row
	--		) ranked_data
	--		WHERE 
	--			rn_desc > GREATEST(1, total_count * 0.01)  -- Exclude top 1% (minimum 1)
	--			AND rn_asc > GREATEST(1, total_count * 0.01)  -- Exclude bottom 1% (minimum 1)
	--	) CohortStats
	--	WHERE 
	--		m.hr3_market_cap IS NOT NULL

-- # HOLDERS

	--alter view hr3_avg_holder as
	--	SELECT m.*, 
	--		CohortStats.mean_holder,
	--		CohortStats.stddev_holder,
	--		(m.hr3_holder - CohortStats.mean_holder) / NULLIF(CohortStats.stddev_holder, 0) AS z_score
	--	FROM 
	--		dbo.mint m
	--	CROSS APPLY
	--	(
	--		SELECT 
	--			AVG(hr3_holder) AS mean_holder,
	--			STDEV(hr3_holder) AS stddev_holder
	--		FROM 
	--		(
	--			SELECT 
	--				m2.hr3_holder,
	--				ROW_NUMBER() OVER (ORDER BY m2.hr3_holder DESC) as rn_desc,
	--				ROW_NUMBER() OVER (ORDER BY m2.hr3_holder ASC) as rn_asc,
	--				COUNT(*) OVER () as total_count
	--			FROM 
	--				dbo.mint m2
	--			WHERE 
	--				m2.hr3_holder IS NOT NULL
	--				AND m2.fetched_utc_3hr BETWEEN DATEADD(hour, -12, m.fetched_utc_3hr) AND m.fetched_utc_3hr
	--				AND m2.id <> m.id  -- Exclude the current row
	--		) ranked_data
	--		WHERE 
	--			rn_desc > GREATEST(1, total_count * 0.01)  -- Exclude top 1% (minimum 1)
	--			AND rn_asc > GREATEST(1, total_count * 0.01)  -- Exclude bottom 1% (minimum 1)
	--	) CohortStats
	--	WHERE 
	--		m.hr3_holder IS NOT NULL

		